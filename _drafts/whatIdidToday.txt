1/17/2017 - Installed Git on my Synology Diskstation (Play214), created a repo for personal game project, and did my first git add/git commit/git push!
-- ref-> http://blog.netgloo.com/2015/04/20/git-server-on-synology-ds115j-installation-and-configurations/
-- Install Git Server package on Diskstation
-- Create new user named "gituser"
-- Add a new shared folder called "git", give read/write access to "gituser" and "admin"
-- Open Git Server and give "gituser" permissions
-- Enable SSH access on Diskstation (Control Panel -> Terminal & SNMP -> Enable SSH Service)
For the next steps I used PuTTY since I'm on Windows, but you can use Terminal instead if you're on Linux.
-- Add shared repository 
$ ssh <adminuser>@diskstation -p <port>
$ cd /volume1/git
$ git init --bare --shared <projectname>.git

I installed Git for Windows (https://git-scm.com/downloads)
-- since I had a project already on my local pc, I just had to do the following
-- Open Git CMD (alternatively you could use GIT Bash, which I realized after the fact)
> cd <path to project>
> git init
> git remote add origin ssh://gituser@diskstation:<port>/volume1/git/<projectname>.git
> git add --all
> git commit -a -m "Initial commit"
> git push -u origin master

It then asks for the password, and pushes the changes to the Git Server. Now I have a local Git Server to store my personal projects!

Next thing I want to do is use public key authentication.


1/19/2017 - I had to get a list of all 3rd party packages for a security audit. After a quick Google of how to export the Solution packages, I found in the NuGet Package Manager Console there is a command:

Get-Package

Which lists all of the Packages, nicely formatted with Id, Version, and Description/Release Notes.

Neat little command that saves a lot of time!

I also wrote a little application that goes through a project and gets all the javascript files, and tries to do something similar to what Get-Package does. I had it grab the file name, directory, and parse out the header description if it existed. I found that it's not very easy to identify what the library is unless it has a header in it, but it helps to have the name and directory.

1/19/2017 - Started working on trying to get an azure website using .Net Core for a simple blog. At first I tried to use one of the templates on Azure Portal, but couldn't find where to get the project files so I could modify it locally. So, I scrapped that one, and started making on in Visual Studio 2015 Community. It seems a lot easier, though I ran into a deployement problem because my Azure SDK was out of date (I hope)
Was getting NoRegisteredProviderFound error when trying to create a plan and a database server + database.
Following this tutorial (https://docs.microsoft.com/en-us/aspnet/core/tutorials/publish-to-azure-webapp-using-vs)

1/27/2017 - Pipelining TODO

1/31/2017 - Github pages
- Set up my first Github page using Jekyll Bootstrap. It took a little bit of work to get the page working how I wanted (I still can't get the code highlighting to work properly), but all in all a good start.

I currently have the index displaying the 10 most recent posts (I liked the way @ploeh did his, so I took a peek and found he was using jekyll pagination). I found out I had to add the gem to the _config.yaml:

### _config.yaml
```
gems: [jekyll-paginate]
gems: ["jekyll-sitemap", "jekyll-paginate"]
```

And then create index.html (and remove index.md):

### index.html
```html
{% for post in paginator.posts %}

   <h2><a href="{{ post.url }}">{{ post.title }}</a></h2>
   <div class="date">{{post.date | date: "%A, %d %B %Y %H:%M:%S %Z" }}</div>
   <div>
    {{ post.content }}
   </div>
   <hr>
{% endfor %}

<!-- Pagination links -->
<div class="pagination">
  {% if paginator.previous_page %}
    <a href="/page{{paginator.previous_page}}" class="next">Next</a>
  {% else %}
  {% endif %}
  {% if paginator.next_page %}
    <a href="/page{{paginator.next_page}}" class="previous ">Previous</a>
  {% else %}
  {% endif %}
</div>
<div class="page_number ">Page {{paginator.page}} of {{paginator.total_pages}}</div>
```

Which nicely lists out the posts along with date and content.

I realize if you are reading this on my github page, this may be kind of a Terminator time-travel paradox as this isn't the first post on here. I usually write notes on what I want to post about offline, and then compile them and post them afterwards. 